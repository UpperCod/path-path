{"version":3,"file":"path-path.js","sources":["../src/index.js"],"sourcesContent":["const CAPTURE = /^\\:([^\\?\\.]+)(\\?|(?:\\.){3}){0,1}$/;\r\nconst FOLDERS = /([^\\/]+)/g;\r\nconst FOLDER = \"[^\\\\/]\";\r\nconst SPLIT = \"(?:\\\\/){0,1}\";\r\n\r\nexport function getSearch(search, params = {}) {\r\n    search = search.match(/[^\\&]+/g) || [];\r\n    return search.reduce((params, item) => {\r\n        let position = item.search(\"=\"),\r\n            param = item.slice(0, position >>> 0),\r\n            value = position > -1 ? item.slice(position + 1) : undefined;\r\n        params[param] = value;\r\n        return params;\r\n    }, params);\r\n}\r\n\r\nexport function create(path) {\r\n    let folders = [\"^\"],\r\n        params = [],\r\n        status = path.match(FOLDERS);\r\n    if (status) {\r\n        status.some(folder => {\r\n            let status = folder.match(CAPTURE);\r\n            if (status) {\r\n                let [all, param, option] = status;\r\n                params.push(param);\r\n                switch (option) {\r\n                    case \"?\":\r\n                        folders.push(`${SPLIT}(${FOLDER}*)`);\r\n                        break;\r\n                    case \"...\":\r\n                        folders.push(`(.*)`);\r\n                        return true;\r\n                    default:\r\n                        folders.push(`\\\\/(${FOLDER}+)`);\r\n                }\r\n            } else {\r\n                folders.push(\r\n                    `\\\\/${\r\n                        folder == \"**\"\r\n                            ? `${FOLDER}+`\r\n                            : folder.replace(/([^\\w\\d])/g, \"\\\\$1\")\r\n                    }`\r\n                );\r\n            }\r\n        });\r\n    } else {\r\n        folders.push(SPLIT);\r\n    }\r\n    return {\r\n        path: path,\r\n        regExp: RegExp(folders.join(\"\") + \"$\"),\r\n        params\r\n    };\r\n}\r\n\r\nexport function resolve(origin, merge) {\r\n    let foldersOrigin = origin.match(FOLDERS),\r\n        foldersMerge = merge.match(FOLDERS),\r\n        folders = [\"\"];\r\n\r\n    for (let i = 0; i < foldersMerge.length; i++) {\r\n        let merge = foldersMerge[i],\r\n            origin = foldersOrigin[i],\r\n            status = merge.match(CAPTURE),\r\n            option = status ? status[2] : merge;\r\n\r\n        switch (option) {\r\n            case \"?\":\r\n                if (origin) folders.push(origin);\r\n                break;\r\n            case \"...\":\r\n                folders = folders.concat(foldersOrigin.slice(i));\r\n                break;\r\n\r\n            default:\r\n                folders.push(\r\n                    status\r\n                        ? origin || option\r\n                        : option === \"**\"\r\n                            ? origin\r\n                            : option\r\n                );\r\n        }\r\n    }\r\n    return folders.join(\"/\");\r\n}\r\n\r\nexport function compare(router, path, params = {}) {\r\n    let query = path.match(/(?:\\/){0,1}\\?(.*)/);\r\n    if (query) {\r\n        params.query = getSearch(query[1]);\r\n        path = path.slice(0, query.index);\r\n    }\r\n    let status = path.match(router.regExp);\r\n\r\n    if (status) {\r\n        status.slice(1).forEach((value, index) => {\r\n            params[router.params[index]] = value;\r\n        });\r\n        return params;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n"],"names":["const","CAPTURE","FOLDERS","FOLDER","SPLIT","getSearch","search","params","match","reduce","item","let","position","param","slice","value","undefined","path","folders","status","some","folder","push","option","replace","regExp","RegExp","join","origin","merge","foldersOrigin","foldersMerge","i","length","concat","router","query","index","forEach"],"mappings":"AAAAA,IAAMC,EAAU,oCACVC,EAAU,YACVC,EAAS,SACTC,EAAQ,eAEP,SAASC,EAAUC,EAAQC,GAE9B,2BADAD,EAASA,EAAOE,MAAM,gBACRC,gBAAQF,EAAQG,GAC1BC,IAAIC,EAAWF,EAAKJ,OAAO,KACvBO,EAAQH,EAAKI,MAAM,EAAGF,IAAa,GACnCG,EAAQH,GAAY,EAAIF,EAAKI,MAAMF,EAAW,QAAKI,EAEvD,OADAT,EAAOM,GAASE,EACTR,GACRA,sCAGA,SAAgBU,GACnBN,IAAIO,GAAW,KACXX,KACAY,EAASF,EAAKT,MAAMN,GA8BxB,OA7BIiB,EACAA,EAAOC,cAAKC,GACRV,IAAIQ,EAASE,EAAOb,MAAMP,GAC1B,GAAIkB,EAAQ,CACR,WAEA,OADAZ,EAAOe,WACCC,GACJ,IAAK,IACDL,EAAQI,KAAQlB,MAASD,QACzB,MACJ,IAAK,MAED,OADAe,EAAQI,KAAK,SACN,EACX,QACIJ,EAAQI,YAAYnB,cAG5Be,EAAQI,YAEU,MAAVD,EACSlB,MACHkB,EAAOG,QAAQ,aAAc,YAMnDN,EAAQI,KAAKlB,IAGba,KAAMA,EACNQ,OAAQC,OAAOR,EAAQS,KAAK,IAAM,YAClCpB,oBAID,SAAiBqB,EAAQC,GAK5B,IAJAlB,IAAImB,EAAgBF,EAAOpB,MAAMN,GAC7B6B,EAAeF,EAAMrB,MAAMN,GAC3BgB,GAAW,IAENc,EAAI,EAAGA,EAAID,EAAaE,OAAQD,IAAK,CAC1CrB,IAAIkB,EAAQE,EAAaC,GACrBJ,EAASE,EAAcE,GACvBb,EAASU,EAAMrB,MAAMP,GACrBsB,EAASJ,EAASA,EAAO,GAAKU,EAElC,OAAQN,GACJ,IAAK,IACGK,GAAQV,EAAQI,KAAKM,GACzB,MACJ,IAAK,MACDV,EAAUA,EAAQgB,OAAOJ,EAAchB,MAAMkB,IAC7C,MAEJ,QACId,EAAQI,KACJH,EACMS,GAAUL,EACC,OAAXA,EACIK,EACAL,IAI1B,OAAOL,EAAQS,KAAK,sBAGxB,SAAwBQ,EAAQlB,EAAMV,sBAClCI,IAAIyB,EAAQnB,EAAKT,MAAM,qBACnB4B,IACA7B,EAAO6B,MAAQ/B,EAAU+B,EAAM,IAC/BnB,EAAOA,EAAKH,MAAM,EAAGsB,EAAMC,QAE/B1B,IAAIQ,EAASF,EAAKT,MAAM2B,EAAOV,QAE/B,QAAIN,IACAA,EAAOL,MAAM,GAAGwB,iBAASvB,EAAOsB,GAC5B9B,EAAO4B,EAAO5B,OAAO8B,IAAUtB,IAE5BR"}