{"version":3,"file":"path-path.m.js","sources":["../src/index.js"],"sourcesContent":["const CAPTURE = /^\\:([^\\?\\.]+)(\\?|(?:\\.){3}){0,1}$/;\r\nconst FOLDERS = /([^\\/]+)/g;\r\nconst FOLDER = \"[^\\\\/]\";\r\nconst SPLIT = \"(?:\\\\/){0,1}\";\r\n\r\nexport function getSearch(search, params = {}) {\r\n    search = search.replace(\"?\", \"\").match(/[^\\&]+/g) || [];\r\n    return search.reduce((params, item) => {\r\n        let position = item.search(\"=\"),\r\n            param = item.slice(0, position >>> 0),\r\n            value = position > -1 ? item.slice(position + 1) : undefined;\r\n        params[param] = value;\r\n        return params;\r\n    }, params);\r\n}\r\n\r\nexport function create(path) {\r\n    let folders = [\"^\"],\r\n        params = [],\r\n        status = path.match(FOLDERS);\r\n    if (status) {\r\n        status.some(folder => {\r\n            let status = folder.match(CAPTURE);\r\n            if (status) {\r\n                let [all, param, option] = status;\r\n                params.push(param);\r\n                switch (option) {\r\n                    case \"?\":\r\n                        folders.push(`${SPLIT}(${FOLDER}*)`);\r\n                        break;\r\n                    case \"...\":\r\n                        folders.push(`(.*)`);\r\n                        return true;\r\n                    default:\r\n                        folders.push(`\\\\/(${FOLDER}+)`);\r\n                }\r\n            } else {\r\n                folders.push(\r\n                    `\\\\/${\r\n                        folder == \"**\"\r\n                            ? `${FOLDER}+`\r\n                            : folder.replace(/([^\\w\\d])/g, \"\\\\$1\")\r\n                    }`\r\n                );\r\n            }\r\n        });\r\n    } else {\r\n        folders.push(SPLIT);\r\n    }\r\n    return {\r\n        path: path,\r\n        regExp: RegExp(folders.join(\"\") + \"$\"),\r\n        params\r\n    };\r\n}\r\n\r\nexport function resolve(origin, merge) {\r\n    let foldersOrigin = origin.match(FOLDERS),\r\n        foldersMerge = merge.match(FOLDERS),\r\n        folders = [\"\"];\r\n\r\n    for (let i = 0; i < foldersMerge.length; i++) {\r\n        let merge = foldersMerge[i],\r\n            origin = foldersOrigin[i],\r\n            status = merge.match(CAPTURE),\r\n            option = status ? status[2] : merge;\r\n\r\n        switch (option) {\r\n            case \"?\":\r\n                if (origin) folders.push(origin);\r\n                break;\r\n            case \"...\":\r\n                folders = folders.concat(foldersOrigin.slice(i));\r\n                break;\r\n\r\n            default:\r\n                folders.push(\r\n                    status\r\n                        ? origin || option\r\n                        : option === \"**\"\r\n                            ? origin\r\n                            : option\r\n                );\r\n        }\r\n    }\r\n    return folders.join(\"/\");\r\n}\r\n\r\nexport function compare(router, path, params = {}) {\r\n    let query = path.match(/([^\\?]+)(.*)/);\r\n    if (query[2]) {\r\n        params.query = getSearch(query[2]);\r\n        path = query[1];\r\n    }\r\n    let status = path.match(router.regExp);\r\n\r\n    if (status) {\r\n        status.slice(1).forEach((value, index) => {\r\n            params[router.params[index]] = value;\r\n        });\r\n        return params;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n"],"names":["const","CAPTURE","FOLDERS","FOLDER","SPLIT","getSearch","search","params","replace","match","reduce","item","let","position","param","slice","value","undefined","create","path","folders","status","some","folder","push","option","regExp","RegExp","join","resolve","origin","merge","foldersOrigin","foldersMerge","i","length","concat","compare","router","query","forEach","index"],"mappings":"AAAAA,IAAMC,EAAU,oCACVC,EAAU,YACVC,EAAS,SACTC,EAAQ,eAEP,SAASC,EAAUC,EAAQC,GAE9B,2BADAD,EAASA,EAAOE,QAAQ,IAAK,IAAIC,MAAM,gBACzBC,gBAAQH,EAAQI,GAC1BC,IAAIC,EAAWF,EAAKL,OAAO,KACvBQ,EAAQH,EAAKI,MAAM,EAAGF,IAAa,GACnCG,EAAQH,GAAY,EAAIF,EAAKI,MAAMF,EAAW,QAAKI,EAEvD,OADAV,EAAOO,GAASE,EACTT,GACRA,GAGA,SAASW,EAAOC,GACnBP,IAAIQ,GAAW,KACXb,KACAc,EAASF,EAAKV,MAAMP,GA8BxB,OA7BImB,EACAA,EAAOC,cAAKC,GACRX,IAAIS,EAASE,EAAOd,MAAMR,GAC1B,GAAIoB,EAAQ,CACR,WAEA,OADAd,EAAOiB,WACCC,GACJ,IAAK,IACDL,EAAQI,KAAQpB,MAASD,QACzB,MACJ,IAAK,MAED,OADAiB,EAAQI,KAAK,SACN,EACX,QACIJ,EAAQI,YAAYrB,cAG5BiB,EAAQI,YAEU,MAAVD,EACSpB,MACHoB,EAAOf,QAAQ,aAAc,YAMnDY,EAAQI,KAAKpB,IAGbe,KAAMA,EACNO,OAAQC,OAAOP,EAAQQ,KAAK,IAAM,YAClCrB,GAID,SAASsB,EAAQC,EAAQC,GAK5B,IAJAnB,IAAIoB,EAAgBF,EAAOrB,MAAMP,GAC7B+B,EAAeF,EAAMtB,MAAMP,GAC3BkB,GAAW,IAENc,EAAI,EAAGA,EAAID,EAAaE,OAAQD,IAAK,CAC1CtB,IAAImB,EAAQE,EAAaC,GACrBJ,EAASE,EAAcE,GACvBb,EAASU,EAAMtB,MAAMR,GACrBwB,EAASJ,EAASA,EAAO,GAAKU,EAElC,OAAQN,GACJ,IAAK,IACGK,GAAQV,EAAQI,KAAKM,GACzB,MACJ,IAAK,MACDV,EAAUA,EAAQgB,OAAOJ,EAAcjB,MAAMmB,IAC7C,MAEJ,QACId,EAAQI,KACJH,EACMS,GAAUL,EACC,OAAXA,EACIK,EACAL,IAI1B,OAAOL,EAAQQ,KAAK,KAGxB,SAAgBS,EAAQC,EAAQnB,EAAMZ,sBAClCK,IAAI2B,EAAQpB,EAAKV,MAAM,gBACnB8B,EAAM,KACNhC,EAAOgC,MAAQlC,EAAUkC,EAAM,IAC/BpB,EAAOoB,EAAM,IAEjB3B,IAAIS,EAASF,EAAKV,MAAM6B,EAAOZ,QAE/B,QAAIL,IACAA,EAAON,MAAM,GAAGyB,iBAASxB,EAAOyB,GAC5BlC,EAAO+B,EAAO/B,OAAOkC,IAAUzB,IAE5BT"}